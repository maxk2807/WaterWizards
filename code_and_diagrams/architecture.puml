@startuml WaterWizards Simple Architecture

!define CLIENT_COLOR #ADD1B2
!define SERVER_COLOR #LightSkyBlue
!define SHARED_COLOR #LightGrey
!define EXTERNAL_COLOR #Wheat

skinparam packageStyle rect
skinparam classFontSize 12

title WaterWizards - Simplified Architecture

' ===== CLIENT PACKAGE =====
package "WaterWizard.Client" CLIENT_COLOR {
    class Program <<entry point>> {
        + static main()
    }
    
    class GameStateManager {
        - IGameState currentState
        + ChangeState(newState : IGameState)
        + Update(deltaTime : float)
        + Draw()
    }
    
    interface IGameState {
        + Enter()
        + Update(deltaTime : float)
        + Draw()
        + Exit()
    }
    
    class MainMenuState implements IGameState
    class LobbyListMenuState implements IGameState
    class PreStartLobbyState implements IGameState
    class InGameState implements IGameState
    
    class NetworkManager {
        + DiscoverLobbies()
        + ConnectToServer(ip : string, port : int)
        + SendMessage(data : NetDataWriter)
        + PollEvents()
    }
    
    class GameScreen {
        - GameBoard playerBoard
        - GameBoard opponentBoard
        + Update(deltaTime : float)
        + Draw()
    }
    
    class GameBoard {
        + SetCellState(x : int, y : int, state : CellState)
        + Draw()
    }
    
    class ChatLogManager {
        + AddMessage(message : string)
        + Draw()
    }
}

' ===== SERVER PACKAGE =====
package "WaterWizard.Server" SERVER_COLOR {
    class Program <<entry point>> {
        + static main()
    }
    
    class GameState {
        - List<Player> players
        - GameSessionId sessionId
        + StartGame()
        + UpdateGameState()
        + HandlePlayerAction(playerId : int, action : GameAction)
    }
    
    class CardAbilities {
        + static void ApplyCardEffect(cardType : CardType, target : CardTarget)
    }
    
    class ServerManager {
        + StartServer(port : int)
        + HandleConnectionRequest(request : ConnectionRequest)
        + BroadcastMessage(data : NetDataWriter)
    }
    
    class GameSessionTimer {
        + StartCountdown(seconds : float)
        + Update(deltaTime : float)
    }
}

' ===== SHARED PACKAGE =====
package "WaterWizard.Shared" SHARED_COLOR {
    class NetworkUtils {
        + static IPAddress GetLocalIpAddress()
        + static string SerializeMessage(message : INetworkMessage) : string
    }
    
    class Gold {
        + int Amount
        + void Add(amount : int)
        + bool Spend(amount : int) : bool
    }
    
    class Mana {
        + int CurrentMana
        + int MaxMana
        + void Regenerate(amount : int)
        + bool Spend(cost : int) : bool
    }
    
    enum CardType {
        Firebolt
        ArcaneMissile
        GreedHit
        ThunderStrike
        Heal
    }
    
    enum CellState {
        Empty
        Ship
        Hit
        Miss
        Thunder
    }
    
    class GameSessionId {
        + Guid Id
        + DateTime CreatedAt
        + bool IsValid() : bool
    }
}

' ===== EXTERNAL LIBRARIES =====
package "External Libraries" EXTERNAL_COLOR {
    class Raylib <<library>> {
        + static void InitWindow()
        + static void BeginDrawing()
        + static void EndDrawing()
        + static void DrawText()
    }
    
    class LiteNetLib <<library>> {
        + class NetManager
        + class NetPeer
        + class NetDataWriter
        + class NetDataReader
    }
}

' ===== RELATIONSHIPS =====
Program --> GameStateManager : initializes >
GameStateManager *--> "1" IGameState : manages current >
GameStateManager --> NetworkManager : uses >
GameStateManager --> ChatLogManager : uses >
InGameState --> GameScreen : uses >
GameScreen --> GameBoard : contains >

Program --> ServerManager : initializes >
Program --> GameState : initializes >
ServerManager --> GameState : manages >
GameState --> CardAbilities : uses >
GameState --> GameSessionTimer : uses >

"WaterWizard.Client" ..> "WaterWizard.Shared" : uses >
"WaterWizard.Server" ..> "WaterWizard.Shared" : uses >
"WaterWizard.Client" ..> "External Libraries" : uses >
"WaterWizard.Server" ..> "External Libraries" : uses >

NetworkManager <--> ServerManager : communicates via LiteNetLib >

@enduml 