name: Release with Changelog

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [closed]
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: false
        default: ''

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    permissions:
      contents: write 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Run NUKE Build
        run: ./build.sh Clean Compile Test

      - name: Publish Client (Windows)
        run: |
          dotnet publish src/WaterWizard.Client/WaterWizard.Client.csproj \
            -c Release \
            -r win-x64 \
            --self-contained true \
            -o ./publish/win \
            --verbosity normal \
            -p:PublishSingleFile=true \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -p:PublishTrimmed=false \
            -p:PublishReadyToRun=false

      - name: Publish Server (Windows)
        run: dotnet publish src/WaterWizard.Server/WaterWizard.Server.csproj -c Release -r win-x64 --self-contained true -o ./publish/win-server

      - name: Publish Client (MacOS x64)
        run: |
          dotnet publish src/WaterWizard.Client/WaterWizard.Client.csproj \
            -c Release \
            -r osx-x64 \
            --self-contained true \
            -o ./publish/osx-x64 \
            --verbosity normal \
            -p:PublishSingleFile=true \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -p:PublishTrimmed=false \
            -p:PublishReadyToRun=false

      - name: Publish Client (MacOS ARM64) 
        run: |
          dotnet publish src/WaterWizard.Client/WaterWizard.Client.csproj \
            -c Release \
            -r osx-arm64 \
            --self-contained true \
            -o ./publish/osx-arm64 \
            --verbosity normal \
            -p:PublishSingleFile=true \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -p:PublishTrimmed=false \
            -p:PublishReadyToRun=false

      - name: Publish Server (MacOS)
        run: dotnet publish src/WaterWizard.Server/WaterWizard.Server.csproj -c Release -r osx-x64 --self-contained true -o ./publish/osx-server

      - name: Publish Client (Linux)
        run: |
          dotnet publish src/WaterWizard.Client/WaterWizard.Client.csproj \
            -c Release \
            -r linux-x64 \
            --self-contained true \
            -o ./publish/linux \
            --verbosity normal \
            -p:PublishSingleFile=true \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -p:PublishTrimmed=false \
            -p:PublishReadyToRun=false

      - name: Publish Server (Linux)
        run: dotnet publish src/WaterWizard.Server/WaterWizard.Server.csproj -c Release -r linux-x64 --self-contained true -o ./publish/linux-server

      - name: Prepare release assets
        run: |
          mkdir -p release-assets

          # Copy Windows executable (should be a single .exe file now)
          if [ -f "./publish/win/WaterWizard.Client.exe" ]; then
            cp "./publish/win/WaterWizard.Client.exe" "release-assets/WaterWizard.Client.exe"
            echo "‚úÖ Windows single-file executable copied"
          else
            echo "‚ùå Warning: Windows executable not found"
          fi
          
          # Copy macOS x64 executable (single file)
          if [ -f "./publish/osx-x64/WaterWizard.Client" ]; then
            cp "./publish/osx-x64/WaterWizard.Client" "release-assets/WaterWizard.Client.MacOS.x64"
            chmod +x "release-assets/WaterWizard.Client.MacOS.x64"
            echo "‚úÖ macOS x64 single-file executable copied"
          else
            echo "‚ùå Warning: macOS x64 executable not found"
          fi
          
          # Copy macOS ARM64 executable (single file)
          if [ -f "./publish/osx-arm64/WaterWizard.Client" ]; then
            cp "./publish/osx-arm64/WaterWizard.Client" "release-assets/WaterWizard.Client.MacOS.ARM64"
            chmod +x "release-assets/WaterWizard.Client.MacOS.ARM64"
            echo "‚úÖ macOS ARM64 single-file executable copied"
          else
            echo "‚ùå Warning: macOS ARM64 executable not found"
          fi
          
          # Copy Linux executable (single file)
          if [ -f "./publish/linux/WaterWizard.Client" ]; then
            cp "./publish/linux/WaterWizard.Client" "release-assets/WaterWizard.Client.Linux"
            chmod +x "release-assets/WaterWizard.Client.Linux"
            echo "‚úÖ Linux single-file executable copied"
          else
            echo "‚ùå Warning: Linux executable not found"
          fi
          
          echo ""
          echo "Final release assets:"
          ls -la release-assets/
          
          # Show file sizes for verification
          echo ""
          echo "File sizes:"
          du -h release-assets/*

      - name: Debug published files
        run: |
          echo "=== Windows publish directory ==="
          ls -la ./publish/win/ || echo "Directory not found"
          
          echo "=== macOS x64 publish directory ==="
          ls -la ./publish/osx-x64/ || echo "Directory not found"
          
          echo "=== macOS ARM64 publish directory ==="
          ls -la ./publish/osx-arm64/ || echo "Directory not found"
          
          echo "=== Linux publish directory ==="
          ls -la ./publish/linux/ || echo "Directory not found"
          
          echo "=== Checking executable types ==="
          if [ -f "./publish/win/WaterWizard.Client.exe" ]; then
            file "./publish/win/WaterWizard.Client.exe"
          fi
          if [ -f "./publish/osx-x64/WaterWizard.Client" ]; then
            file "./publish/osx-x64/WaterWizard.Client"
          fi
          if [ -f "./publish/osx-arm64/WaterWizard.Client" ]; then
            file "./publish/osx-arm64/WaterWizard.Client"
          fi
          if [ -f "./publish/linux/WaterWizard.Client" ]; then
            file "./publish/linux/WaterWizard.Client"
          fi

      - name: Get and increment version if needed
        id: get_version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch --tags
          
          # Use manual version if provided
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            # Get current version from .csproj
            PROJECT_VERSION=$(grep -m1 '<Version>' src/WaterWizard.Server/WaterWizard.Server.csproj | sed -E 's/.*<Version>(.+)<\/Version>.*/\1/')
            
            # Get latest tag version
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -n "$LATEST_TAG" ]; then
              LATEST_VERSION=${LATEST_TAG#v}  # Remove 'v' prefix
            else
              LATEST_VERSION="0.0.0"
            fi
            
            echo "Project version: $PROJECT_VERSION"
            echo "Latest tag: $LATEST_TAG"
            echo "Latest tag version: $LATEST_VERSION"
            
            # Use the higher version between project and latest tag
            if [ -n "$PROJECT_VERSION" ] && [ "$PROJECT_VERSION" != "0.0.0" ]; then
              VERSION="$PROJECT_VERSION"
              echo "Using project version: $VERSION"
            else
              VERSION="$LATEST_VERSION"
              echo "Using latest tag version: $VERSION"
            fi
            
            # Parse version components
            MAJOR=$(echo "$VERSION" | cut -d. -f1)
            MINOR=$(echo "$VERSION" | cut -d. -f2)
            PATCH=$(echo "$VERSION" | cut -d. -f3)
            [ -z "$PATCH" ] && PATCH=0
            
            # Increment patch version for next release
            PATCH=$((PATCH + 1))
            VERSION="$MAJOR.$MINOR.$PATCH"
            
            echo "Incremented version: $VERSION"
          fi
          
          TAG="v$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
          # Check if tag already exists
          if git rev-parse "refs/tags/$TAG" >/dev/null 2>&1; then
            echo "‚ùå Tag $TAG already exists! Incrementing patch version..."
            PATCH=$((PATCH + 1))
            VERSION="$MAJOR.$MINOR.$PATCH"
            TAG="v$VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=$TAG" >> $GITHUB_OUTPUT
          fi
          
          echo "Final version: $VERSION"
          echo "Final tag: $TAG"

      - name: Generate Intelligent Changelog
        id: changelog
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # First release - get all PRs
            PRS=$(gh pr list --state merged --json title,number,author,mergedAt --limit 100)
          else
            # Get PRs merged since last tag
            PREVIOUS_DATE=$(git log -1 --format=%cd --date=iso ${PREVIOUS_TAG})
            PRS=$(gh pr list --state merged --json title,number,author,mergedAt --limit 100 --search "merged:>${PREVIOUS_DATE}")
          fi
          
          # Create changelog with PR format
          CHANGELOG="## üöÄ What's Changed in v${{ steps.get_version.outputs.version }}

          "
          
          # Process PRs and format them
          if [ -n "$PRS" ] && [ "$PRS" != "[]" ]; then
            echo "$PRS" | jq -r '.[] | "\(.title) by @\(.author.login) in #\(.number)"' | while read -r line; do
              if [ -n "$line" ]; then
                CHANGELOG+="$line"$'\n'
              fi
            done
          else
            CHANGELOG+="No new changes in this release"$'\n'
          fi
          
          CHANGELOG+="

          ### üì¶ Installation & Usage

          #### ü™ü Windows
          1. Download \`WaterWizard.Client.exe\` or \`WaterWizard.Client.Windows.zip\`
          2. Run the executable
          3. Host or join a game

          #### üçé macOS
          1. Download \`WaterWizard.Client.MacOS\` or \`WaterWizard.Client.MacOS.tar.gz\`
          2. Make it executable: \`chmod +x WaterWizard.Client.MacOS\`
          3. Run the game

          #### üêß Linux
          1. Download \`WaterWizard.Client.Linux\` or \`WaterWizard.Client.Linux.tar.gz\`
          2. Make it executable: \`chmod +x WaterWizard.Client.Linux\`
          3. Run the game

          #### üîß Development Setup
          \`\`\`bash
          # Clone the repository
          git clone https://github.com/maxk2807/WaterWizards.git
          cd WaterWizards

          # Use the optimized launcher
          ./start-game
          \`\`\`

          ### üéØ Quick Start
          1. **Host Game**: Click \"Host Game\" in the first client
          2. **Join Game**: Click \"Join Game\" in the second client, enter \"localhost\"
          3. **Ready Up**: Both players click \"Ready\"
          4. **Start Game**: Click \"Start Game\" to begin

          ---
          *This release was automatically generated by GitHub Actions*
          *Generated on: $(date -u +'%Y-%m-%d %H:%M:%S UTC')*"
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release & Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.tag }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}