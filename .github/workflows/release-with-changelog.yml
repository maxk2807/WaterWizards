name: Release with Changelog

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [closed]
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: false
        default: ''

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    permissions:
      contents: write 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Run NUKE Build
        run: ./build.sh Clean Compile Test

      - name: Publish Client (Windows)
        run: dotnet publish src/WaterWizard.Client/WaterWizard.Client.csproj -c Release -r win-x64 --self-contained true -o ./publish/win --verbosity normal

      - name: Publish Server (Windows)
        run: dotnet publish src/WaterWizard.Server/WaterWizard.Server.csproj -c Release -r win-x64 --self-contained true -o ./publish/win-server

      - name: Publish Client (MacOS)
        run: dotnet publish src/WaterWizard.Client/WaterWizard.Client.csproj -c Release -r osx-x64 --self-contained true -o ./publish/osx --verbosity normal

      - name: Publish Server (MacOS)
        run: dotnet publish src/WaterWizard.Server/WaterWizard.Server.csproj -c Release -r osx-x64 --self-contained true -o ./publish/osx-server

      - name: Prepare release assets
        run: |
          mkdir release-assets

          # Find the actual executable names
          WIN_EXE=$(find ./publish/win -name "*.exe" -type f | head -1)
          OSX_EXE=$(find ./publish/osx -type f -executable | grep -v "\.dll$" | grep -v "\.so$" | head -1)
          
          if [ -n "$WIN_EXE" ]; then
            cp "$WIN_EXE" release-assets/WaterWizard.Client.exe
          else
            echo "Warning: No Windows executable found"
          fi
          
          if [ -n "$OSX_EXE" ]; then
            cp "$OSX_EXE" release-assets/WaterWizard.Client.MacOS
          else
            echo "Warning: No MacOS executable found"
          fi
          
          echo "Release assets:"
          ls -la release-assets/

      - name: Get and increment version if needed
        id: get_version
        run: |
          git fetch --tags
          
          # Use manual version if provided
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            # Auto-increment version
            VERSION=$(grep -m1 '<Version>' src/WaterWizard.Server/WaterWizard.Server.csproj | sed -E 's/.*<Version>(.+)<\/Version>.*/\1/')
            if [ -z "$VERSION" ]; then
              VERSION="0.0.$GITHUB_RUN_NUMBER"
            fi
            MAJOR=$(echo "$VERSION" | cut -d. -f1)
            MINOR=$(echo "$VERSION" | cut -d. -f2)
            PATCH=$(echo "$VERSION" | cut -d. -f3)
            [ -z "$PATCH" ] && PATCH=0
            PATCH=$((PATCH + 1))
            VERSION="$MAJOR.$MINOR.$PATCH"
          fi
          
          TAG="v$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Generate Intelligent Changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # First release - get all commits
            COMMITS=$(git log --pretty=format:"%s|%h|%an" --no-merges)
          else
            # Get commits since last tag
            COMMITS=$(git log --pretty=format:"%s|%h|%an" --no-merges ${PREVIOUS_TAG}..HEAD)
          fi
          
          # Categorize commits based on WaterWizards conventions
          GAME_FEATURES=""
          TECHNICAL_IMPROVEMENTS=""
          BUG_FIXES=""
          DOCUMENTATION_CHANGES=""
          MAINTENANCE_CHANGES=""
          UNCATEGORIZED=""
          
          while IFS='|' read -r message hash author; do
            # Skip empty lines
            [ -z "$message" ] && continue
            
            # WaterWizards-specific patterns
            if [[ "$message" =~ ^(feat|feature|add|new|implement|F[0-9]+) ]] || [[ "$message" =~ F[0-9]+ ]]; then
              GAME_FEATURES+="- $message ($hash) by $author"$'\n'
            elif [[ "$message" =~ ^(fix|bug|resolve|patch|B[0-9]+) ]] || [[ "$message" =~ B[0-9]+ ]]; then
              BUG_FIXES+="- $message ($hash) by $author"$'\n'
            elif [[ "$message" =~ ^(refactor|improve|optimize|update|upgrade|enhance) ]]; then
              TECHNICAL_IMPROVEMENTS+="- $message ($hash) by $author"$'\n'
            elif [[ "$message" =~ ^(docs|documentation) ]]; then
              DOCUMENTATION_CHANGES+="- 📚 $message ($hash) by $author"$'\n'
            elif [[ "$message" =~ ^(test|chore|style|ci|build) ]]; then
              MAINTENANCE_CHANGES+="- 🔧 $message ($hash) by $author"$'\n'
            else
              # Only include meaningful uncategorized commits (not merge commits, etc.)
              if [[ ! "$message" =~ ^(merge|Merge|WIP|wip|temp|Temp|test|Test) ]] && [[ ${#message} -gt 10 ]]; then
                UNCATEGORIZED+="- $message ($hash) by $author"$'\n'
              fi
            fi
          done <<< "$COMMITS"
          
          # Create changelog
          CHANGELOG="## 🚀 What's New in v${{ steps.get_version.outputs.version }}

          "
          
          # Add sections only if they have content
          if [ -n "$GAME_FEATURES" ]; then
            CHANGELOG+="### 🎮 Game Features
          $GAME_FEATURES

          "
          else
            CHANGELOG+="### 🎮 Game Features
          - No new game features in this release

          "
          fi

          if [ -n "$TECHNICAL_IMPROVEMENTS" ]; then
            CHANGELOG+="### 🛠️ Technical Improvements
          $TECHNICAL_IMPROVEMENTS

          "
          else
            CHANGELOG+="### 🛠️ Technical Improvements
          - No technical improvements in this release

          "
          fi

          if [ -n "$BUG_FIXES" ]; then
            CHANGELOG+="### 🐛 Bug Fixes
          $BUG_FIXES

          "
          else
            CHANGELOG+="### 🐛 Bug Fixes
          - No bug fixes in this release

          "
          fi

          if [ -n "$DOCUMENTATION_CHANGES" ]; then
            CHANGELOG+="### 📚 Documentation
          $DOCUMENTATION_CHANGES

          "
          fi

          if [ -n "$MAINTENANCE_CHANGES" ]; then
            CHANGELOG+="### 🔧 Maintenance
          $MAINTENANCE_CHANGES

          "
          fi

          if [ -n "$UNCATEGORIZED" ]; then
            CHANGELOG+="### 📝 Other Changes
          $UNCATEGORIZED

          "
          fi

          CHANGELOG+="### 📦 Installation & Usage

          #### 🪟 Windows
          1. Download \`WaterWizard.Client.exe\`
          2. Run the executable
          3. Host or join a game

          #### 🍎 macOS
          1. Download \`WaterWizard.Client.MacOS\`
          2. Make it executable: \`chmod +x WaterWizard.Client.MacOS\`
          3. Run the game

          #### 🔧 Development Setup
          \`\`\`bash
          # Clone the repository
          git clone https://github.com/$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)/WaterWizards.git
          cd WaterWizards

          # Use the optimized launcher
          ./start-game
          \`\`\`

          ### 🎯 Quick Start
          1. **Host Game**: Click \"Host Game\" in the first client
          2. **Join Game**: Click \"Join Game\" in the second client, enter \"localhost\"
          3. **Ready Up**: Both players click \"Ready\"
          4. **Start Game**: Click \"Start Game\" to begin

          ---
          *This release was automatically generated by GitHub Actions*
          *Generated on: $(date -u +'%Y-%m-%d %H:%M:%S UTC')*"
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release & Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.tag }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 